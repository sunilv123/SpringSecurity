spring.datasource.driver-class-name = org.postgresql.Driver
spring.datasource.url = jdbc:postgresql://localhost:5432/SpringSecurity
spring.datasource.username = postgres
spring.datasource.password = test

# = JPA / HIBERNATEs
# ===============================
# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).
# Show or not log for each sql query
spring.jpa.show-sql = false

spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults=false
# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto = update
# Naming strategy
spring.jpa.hibernate.naming.strategy= org.hibernate.cfg.ImprovedNamingStrategy
# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
# Configuring the port number for the application to run on
server.port = 8084
#spring.jpa.show-sql=true
# Initialize the schema on startup.
spring.jpa.generate-ddl = true
# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.dbcp.test-while-idle= true
spring.datasource.dbcp.validation-query= SELECT 1
spring.mvc.throw-exception-if-no-handler-found=true
# Enable default resource handling.
spring.resources.add-mappings=false
# Maximum multipart file size.
spring.http.multipart.max-file-size=5Mb
# Maximum multipart request size (If a request contains multiple files then, 